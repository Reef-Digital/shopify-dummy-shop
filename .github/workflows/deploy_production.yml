name: Build and Deploy to Production

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch pattern
        run: |
          if [[ "${{ github.ref_name }}" != release/* ]]; then
            echo "Only release/* branches are allowed for production deployments"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 20
    environment: 'production'
    outputs:
      target_sha: ${{ steps.rev.outputs.sha }}
    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Read version from package.json
        id: pkg
        run: node -e "require('fs').appendFileSync(process.env.GITHUB_OUTPUT, 'version=' + require('./package.json').version + '\n')"

      - name: Load .env (optional)
        run: |
          if [ -n "${{ vars.ENV_FILE_URL }}" ]; then
            if [[ "${{ vars.ENV_FILE_URL }}" == s3://* ]]; then
              aws s3 cp "${{ vars.ENV_FILE_URL }}" .env
            else
              curl -fsSL "${{ vars.ENV_FILE_URL }}" -o .env
            fi
          fi

      - name: Install dependencies
        run: npm ci

      - name: Build static web (Vite)
        env:
          CI: ''
        run: npm run build

      - name: Resolve target SHA
        id: rev
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: "Notify Slack: Deployment started"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_HOOK_URL }}
          BRANCH: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          VERSION: ${{ steps.pkg.outputs.version }}
          SHA: ${{ steps.rev.outputs.sha }}
          ACTOR: ${{ github.actor }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"*Shopify Dummy Shop deploy started* :rocket:\nRepo: ${REPO}\nBranch: ${BRANCH}\nVersion: ${VERSION}\nSHA: ${SHA}\nBy: ${ACTOR}\nRun: ${RUN_URL}\"}" "$SLACK_WEBHOOK_URL"

      - name: Store the build in s3
        run: |
          aws s3 sync --delete ./dist s3://${{ vars.BUILD_BUCKET }}/shop-organisation-fe/build/${{ steps.rev.outputs.sha }}
          aws s3 sync --delete ./dist s3://${{ vars.BUILD_BUCKET }}/shop-organisation-fe/build/production

  deploy:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    environment: 'production'
    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}

      - name: Download the build
        env:
          CI: ''
        run: |
          mkdir build
          aws s3 sync s3://${{ vars.BUILD_BUCKET }}/shop-organisation-fe/build/${{ needs.build.outputs.target_sha }} ./build

      - name: Deploy
        uses: reggionick/s3-deploy@v4
        with:
          folder: build
          bucket: ${{ vars.S3_BUCKET }}
          bucket-region: ${{ vars.S3_BUCKET_REGION }}
          dist-id: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
          invalidation: /
          delete-removed: true
          no-cache: true
          private: true
          files-to-include: '{.*/**,**}'

      - name: "Notify Slack: Deployment succeeded"
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_HOOK_URL }}
          BRANCH: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          VERSION: ${{ needs.build.outputs.target_sha }}
          BUCKET: ${{ vars.S3_BUCKET }}
          DIST_ID: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"*Shopify Dummy Shop deploy succeeded* :white_check_mark:\nRepo: ${REPO}\nBranch: ${BRANCH}\nBuild: ${VERSION}\nBucket: ${BUCKET}\nCF Dist: ${DIST_ID}\nRun: ${RUN_URL}\"}" "$SLACK_WEBHOOK_URL"

      - name: "Notify Slack: Deployment failed"
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_HOOK_URL }}
          BRANCH: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          VERSION: ${{ needs.build.outputs.target_sha }}
          BUCKET: ${{ vars.S3_BUCKET }}
          DIST_ID: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"*Shopify Dummy Shop deploy failed* :x:\nRepo: ${REPO}\nBranch: ${BRANCH}\nBuild: ${VERSION}\nBucket: ${BUCKET}\nCF Dist: ${DIST_ID}\nRun: ${RUN_URL}\"}" "$SLACK_WEBHOOK_URL"


